-- Cleaning Data in SQL Queries

Select * 
From [Portfolio Project].dbo.NashvilleHousing

-- Standardize Date Format

Select SaleDateConverted, CONVERT(Date,SaleDate)
From [Portfolio Project].dbo.NashvilleHousing

UPDATE NashvilleHousing
SET SaleDate = CONVERT (Date,SaleDate)

ALTER TABLE NashvilleHousing
Add SaleDateConverted Date;

UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT (Date,SaleDate)


-- Population Property Address Data

Select *
From [Portfolio Project].dbo.NashvilleHousing
--Where PropertyAddress is null
order by ParcelID

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Portfolio Project].dbo.NashvilleHousing a
JOIN [Portfolio Project].dbo.NashvilleHousing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
where a.PropertyAddress is null

Update a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Portfolio Project].dbo.NashvilleHousing a
JOIN [Portfolio Project].dbo.NashvilleHousing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

-- Breaking out Address into Individual Columns (Address, City, State)

Select PropertyAddress
from [Portfolio Project].dbo.NashvilleHousing
-- Where PropertyAddress is null
-- order by ParcelID

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)  -1) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)  +1, LEN(PropertyAddress)) as Address

From  [Portfolio Project].dbo.NashvilleHousing

ALTER TABLE dbo.NashvilleHousing
Add PropertySplitAddress Nvarchar(255);

Update dbo.NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)  -1)

ALTER TABLE NashvilleHousing
Add PropertySplitCity  Nvarchar(255); 

Update NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1, LEN(PropertyAddress))

Select * 
From [Portfolio Project].dbo.NashvilleHousing

Select OwnerAddress
from [Portfolio Project].dbo.NashvilleHousing

Select
PARSENAME (REPLACE(OwnerAddress, ',','.') , 3)
,PARSENAME (REPLACE(OwnerAddress, ',','.') , 2)
,PARSENAME (REPLACE(OwnerAddress, ',','.') , 1)
from [Portfolio Project].dbo.NashvilleHousing

ALTER TABLE dbo.NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update dbo.NashvilleHousing
SET OwnerSplitAddress = PARSENAME (REPLACE(OwnerAddress, ',','.') , 3)

ALTER TABLE NashvilleHousing
Add OwnerSplitCity  Nvarchar(255); 

Update NashvilleHousing
SET OwnerSplitCity =  PARSENAME (REPLACE(OwnerAddress, ',','.') , 2)

ALTER TABLE dbo.NashvilleHousing 
Add OwnerSplitState Nvarchar(255);

Update dbo.NashvilleHousing
SET OwnerSplitState = PARSENAME (REPLACE(OwnerAddress, ',','.') , 1)

Select *
from [Portfolio Project].dbo.NashvilleHousing
-- you can delete all these select * statements from portfolio, this is
-- to just check if I did things correctly 



-- Change Y and N to Yes and No in "Sold as Vacant" field 

Select Distinct (SoldAsVacant), Count(SoldasVacant)
from [Portfolio Project].dbo.NashvilleHousing
group by SoldasVacant
order by 2

Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
       When SoldAsVacant = 'N' THEN 'No'
	   Else SoldAsVacant
	   end
from [Portfolio Project].dbo.NashvilleHousing

Update NashvilleHousing 
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
       When SoldAsVacant = 'N' THEN 'No'
	   Else SoldAsVacant
	   end


-- Removing Duplicates 

WITH RowNumCTE AS (
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From [Portfolio Project].dbo.NashvilleHousing
)
SELECT *
from RowNumCTE
Where row_num > 1
--Order By PropertyAddress

-- Deleting unused columns for the sake of demonstration purposes 

Select * 
From dbo.NashvilleHousing

ALTER TABLE dbo.NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

ALTER TABLE dbo.NashvilleHousing
DROP COLUMN SaleDate
